{"version":3,"sources":["../src/main.js"],"names":["Point","x","y","xDis","yDis","other","Math","sqrt","pow","abs","RangeValue","min","max","now","PlayerValues","maxLife","nowLife","atk","Player","point","values","MonsterValues","Monster","World","width","height","world","player","console","log","temp","move","isPointInWorld","p1","p2","lineDistance","latticeDistance","monster","i"],"mappings":"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","file":"main.js","sourcesContent":["// import fs from 'fs'\r\n\r\n\r\nclass Point {\r\n\r\n    constructor(x = 0, y = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} xDis \r\n     * @param {Number} yDis \r\n     */\r\n    move(xDis, yDis) {\r\n        return new Point(this.x + xDis, this.y + yDis);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Point} other \r\n     */\r\n    lineDistance(other) {\r\n        return Math.sqrt(Math.pow(this.x - other.x, 2) + Math.pow(this.y - other.y, 2));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Point} other \r\n     */\r\n    latticeDistance(other) {\r\n        return Math.abs(this.x - other.x) + Math.abs(this.y - other.y, );\r\n    }\r\n\r\n}\r\n\r\nclass RangeValue {\r\n\r\n    /**\r\n     * \r\n     * @param {Number} min\r\n     * @param {Number} max \r\n     * @param {Number} now \r\n     */\r\n    constructor(min, max, now) {\r\n        this.min = min;\r\n        this.max = max;\r\n        this.now = now;\r\n    }\r\n}\r\n\r\nclass PlayerValues {\r\n\r\n    /**\r\n     * \r\n     * @param {Number} maxLife \r\n     * @param {Number} nowLife \r\n     * @param {Number} atk \r\n     */\r\n    constructor(maxLife, nowLife, atk) {\r\n        this.maxLife = maxLife;\r\n        this.nowLife = nowLife;\r\n        this.atk = atk;\r\n    }\r\n}\r\n\r\nclass Player {\r\n\r\n    /**\r\n     * \r\n     * @param {Point} point\r\n     * @param {PlayerValues} values\r\n     */\r\n    constructor(point, values) {\r\n        this.point = point;\r\n        this.values = values;\r\n    }\r\n}\r\n\r\nclass MonsterValues {\r\n\r\n    /**\r\n     * \r\n     * @param {Number} maxLife \r\n     * @param {Number} nowLife \r\n     * @param {Number} atk \r\n     */\r\n    constructor(maxLife, nowLife, atk) {\r\n        this.maxLife = maxLife;\r\n        this.nowLife = nowLife;\r\n        this.atk = atk;\r\n    }\r\n}\r\n\r\nclass Monster {\r\n\r\n    /**\r\n     * \r\n     * @param {Point} point \r\n     * @param {MonsterValues} values\r\n     */\r\n    constructor(point, values) {\r\n        this.point = point;\r\n        this.values = values;\r\n    }\r\n}\r\n\r\nclass World {\r\n\r\n    /**\r\n     * \r\n     * @param {Number} width \r\n     * @param {Number} height \r\n     */\r\n    constructor(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Point} point \r\n     */\r\n    isPointInWorld(point) {\r\n        return point.x >= 0 && point.y >= 0 && point.x < this.width && point.y < this.height;\r\n    }\r\n}\r\n\r\n\r\n\r\nlet world = new World(57, 32);\r\nlet player = new Player(new Point(55, 8), new MonsterValues(100, 100, 35));\r\nconsole.log(player)\r\n\r\n// Move\r\nlet temp = player.point.move(1, -1);\r\nif (world.isPointInWorld(temp)) player.point = temp;\r\nconsole.log(player)\r\n\r\n\r\n// Distance\r\nlet p1 = new Point(10, 10);\r\nlet p2 = new Point(20, 20);\r\nconsole.log(p1.lineDistance(p2))\r\nconsole.log(p1.latticeDistance(p2))\r\n\r\nlet monster = new Monster(new Point(56, 7), new PlayerValues(200, 200, 15));\r\nconsole.log(monster);\r\n\r\n// Atk\r\nif (player.point.latticeDistance(monster.point) == 0) {\r\n    console.log('atk!!!!!!!!!!!!!!!!!!!');\r\n    for (let i = 0; i < 3; i++) {\r\n        player.values.nowLife -= monster.values.atk;\r\n        monster.values.nowLife -= player.values.atk;\r\n    }\r\n    console.log(player);\r\n    console.log(monster);\r\n}"]}